<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Merger - Working Version</title>
    <script src="https://unpkg.com/pdf-lib@1.17.1/dist/pdf-lib.min.js"></script>
    <script src="https://unpkg.com/downloadjs@1.4.7"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .upload-area {
            border: 2px dashed #3498db;
            border-radius: 5px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
        }
        #file-list {
            margin: 20px 0;
        }
        .file-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background: #f8f9fa;
            margin-bottom: 5px;
            border-radius: 3px;
        }
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 16px;
        }
        button:disabled {
            background: #95a5a6;
            cursor: not-allowed;
        }
        #status {
            margin: 20px 0;
            padding: 10px;
            border-radius: 3px;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0,0,0,.3);
            border-radius: 50%;
            border-top-color: #3498db;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <h1>PDF Merger</h1>
    <p>Combine multiple PDF files into one document</p>
    
    <div class="upload-area" id="uploadArea">
        <p>Drag & drop PDF files here or click to select</p>
        <input type="file" id="fileInput" accept=".pdf" multiple style="display: none;">
    </div>
    
    <div id="file-list"></div>
    
    <div>
        <button id="mergeBtn" disabled>Merge PDFs</button>
        <button id="resetBtn">Reset</button>
    </div>
    
    <div id="status"></div>

    <script>
        // DOM elements
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const fileList = document.getElementById('file-list');
        const mergeBtn = document.getElementById('mergeBtn');
        const resetBtn = document.getElementById('resetBtn');
        const statusDiv = document.getElementById('status');
        
        // Store PDF files
        let pdfFiles = [];
        
        // Event listeners
        uploadArea.addEventListener('click', () => fileInput.click());
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#2ecc71';
        });
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.style.borderColor = '#3498db';
        });
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#3498db';
            if (e.dataTransfer.files.length) {
                handleFiles(e.dataTransfer.files);
            }
        });
        
        fileInput.addEventListener('change', () => {
            if (fileInput.files.length) {
                handleFiles(fileInput.files);
            }
        });
        
        mergeBtn.addEventListener('click', mergePdfs);
        resetBtn.addEventListener('click', resetTool);
        
        // Handle selected files
        async function handleFiles(newFiles) {
            // Filter for PDFs only
            const pdfFilesArray = Array.from(newFiles).filter(file => file.type === 'application/pdf');
            
            if (pdfFilesArray.length === 0) {
                showStatus('Please select PDF files only', 'error');
                return;
            }
            
            // Check if adding these files would exceed limit
            if (pdfFiles.length + pdfFilesArray.length > 20) {
                showStatus('Maximum 20 PDFs can be merged at once', 'error');
                return;
            }
            
            // Add new files
            for (const file of pdfFilesArray) {
                try {
                    // Read each file as ArrayBuffer
                    const arrayBuffer = await file.arrayBuffer();
                    pdfFiles.push({
                        name: file.name,
                        size: file.size,
                        arrayBuffer: arrayBuffer
                    });
                } catch (err) {
                    console.error('Error reading file:', err);
                    showStatus(`Error reading ${file.name}`, 'error');
                }
            }
            
            updateFileList();
            mergeBtn.disabled = pdfFiles.length < 2;
        }
        
        // Update the file list UI
        function updateFileList() {
            fileList.innerHTML = '';
            
            pdfFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <span>${file.name} (${formatFileSize(file.size)})</span>
                    <button class="remove-btn" data-index="${index}">Remove</button>
                `;
                fileList.appendChild(fileItem);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = e.target.getAttribute('data-index');
                    pdfFiles.splice(index, 1);
                    updateFileList();
                    mergeBtn.disabled = pdfFiles.length < 2;
                });
            });
        }
        
        // Merge PDFs function
        async function mergePdfs() {
            if (pdfFiles.length < 2) return;
            
            showStatus('<span class="loading"></span> Merging PDFs...', 'info');
            mergeBtn.disabled = true;
            
            try {
                const { PDFDocument } = PDFLib;
                
                // Create a new PDF document
                const mergedPdf = await PDFDocument.create();
                
                // Process each PDF
                for (const pdfFile of pdfFiles) {
                    try {
                        const pdfDoc = await PDFDocument.load(pdfFile.arrayBuffer);
                        const pages = await mergedPdf.copyPages(pdfDoc, pdfDoc.getPageIndices());
                        pages.forEach(page => mergedPdf.addPage(page));
                    } catch (err) {
                        console.error('Error processing PDF:', err);
                        showStatus(`Error processing ${pdfFile.name}`, 'error');
                        return;
                    }
                }
                
                // Save the merged PDF
                const mergedPdfBytes = await mergedPdf.save();
                
                // Create download
                const blob = new Blob([mergedPdfBytes], { type: 'application/pdf' });
                const fileName = `merged-${new Date().toISOString().slice(0,10)}.pdf`;
                
                download(blob, fileName, 'application/pdf');
                
                showStatus('PDFs merged successfully!', 'success');
                
            } catch (err) {
                console.error('Error merging PDFs:', err);
                showStatus('Error merging PDFs', 'error');
            } finally {
                mergeBtn.disabled = false;
            }
        }
        
        // Reset the tool
        function resetTool() {
            pdfFiles = [];
            fileInput.value = '';
            fileList.innerHTML = '';
            mergeBtn.disabled = true;
            statusDiv.innerHTML = '';
        }
        
        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }
        
        // Show status messages
        function showStatus(message, type) {
            statusDiv.innerHTML = message;
            statusDiv.style.color = type === 'error' ? '#e74c3c' : 
                                   type === 'success' ? '#2ecc71' : '#3498db';
        }
    </script>
</body>
</html>
